% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trainer.R
\name{Trainer}
\alias{Trainer}
\title{Trainer class}
\description{
This class is responsible for managing the training and the
testing process of a given network for a given optimizer.
}
\examples{
# ------------------------------------------------
# Example 1
# ------------------------------------------------
optimizer <- OptimizerSGD$new(0.0005, 0)

nn_cls <- NeuralNet$new(c(784,  200, 10),
             category="classification")
training_data <- list(
   list(input = 1:784, expectedOutput = 2),
   list(input = 784:1, expectedOutput = 10),
   ...
)
test_data <- list(
   list(input = 1:784 * 2, expectedOutput = 1),
   ...
)
trainer1 <- Trainer$new(nn_cls, optimizer,
                       training_data,
                       test_data))

trainer$train(epochs = 5)
trainer$test()

# ------------------------------------------------
# Example 2
# ------------------------------------------------
optimizer <- OptimizerMomentum$new(0.0005, 0, 0.9)

nn_reg <- NeuralNet$new(c(784,  200, 1),
             category="regression")
accuracy_tester <- accuracy_tester_regression_rel(0.1)
inputs <- list(1:784, 784:1, 1:784 * 2, ...)
targets <- list(5.7, 1.7, 10.7, ...)
trainer2 <- Trainer$new(nn_cls, optimizer,
                   accuracy_tester = accuracy_tester))
trainer2$generateTrainingTest(inputs, targets,
                   test_percentage = 0.1)
trainer2$train(
     epochs = 10,
     use_early_stopping = T,
     es_test_frequency = 1000,
     es_test_size = 100,
     es_minimal_improvement = -0.02)
trainer$test(500)


## ------------------------------------------------
## Method `Trainer$new`
## ------------------------------------------------

training_data <- list(
   list(input = 1:784, expectedOutput = 2),
   list(input = 784:1, expectedOutput = 10),
   ...
)
test_data <- list(
   list(input = 1:784 * 2, expectedOutput = 1),
   ...
)
trainer <- Trainer$new(nn_cls, optimizer,
                       training_data,
                       test_data))


## ------------------------------------------------
## Method `Trainer$setTrainingData`
## ------------------------------------------------

training_data <- list(
  list(input = c(0.5, 0.5),
       expectedOutput = 2),
  list(input = c(0.1, 0.8),
       expectedOutput = 1)
)
trainer$setTrainingData(training_data)


## ------------------------------------------------
## Method `Trainer$setTestData`
## ------------------------------------------------

test_data <- list(
  list(input = c(0.5, 0.5),
       expectedOutput = 2),
  list(input = c(0.1, 0.8),
       expectedOutput = 1)
)
trainer$setTestData(test_data)


## ------------------------------------------------
## Method `Trainer$separateData`
## ------------------------------------------------

data <- list(
  list(input = c(0.5, 0.5),
       expectedOutput = 2),
  list(input = c(0.1, 0.8),
       expectedOutput = 1)
)
trainer$separateData(data,
           test_percentage = 0.5)


## ------------------------------------------------
## Method `Trainer$generateTrainingTest`
## ------------------------------------------------

inputs <-
  list(c(0.5, 0.5), c(0.1, 0.8))
targets <-
  list(2, 1)
trainer$generateTrainingTest
  (inputs, targets,
   test_percentage = 0.5)


## ------------------------------------------------
## Method `Trainer$test`
## ------------------------------------------------

test_result <- trainer$test(500)
test_result <- trainer$test()


## ------------------------------------------------
## Method `Trainer$train`
## ------------------------------------------------

trainer$train(epochs = 5)
trainer$train(epochs = 1,
     training_per_epoch = 1000)
trainer$train(epochs = 10,
     training_per_epoch = 1000)

trainer$train(
     epochs = 10,
     use_early_stopping = T,
     es_test_frequency = 1000,
     es_test_size = 100,
     es_minimal_improvement = -0.02)
finished <- trainer$train(
     epochs = 50,
     training_per_epoch = 10000
     use_early_stopping = T,
     es_test_frequency = 1000,
     es_test_size = 100,
     es_minimal_improvement = -0.02)

if (finished)
     print("training was completed")
else
     print("training was aborted by early stopping")

}
\seealso{
?NeuralNet

?NeuralNet

?NeuralNet
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Trainer$new()}}
\item \href{#method-setNeuralnet}{\code{Trainer$setNeuralnet()}}
\item \href{#method-setOptimizer}{\code{Trainer$setOptimizer()}}
\item \href{#method-setTrainingData}{\code{Trainer$setTrainingData()}}
\item \href{#method-setTestData}{\code{Trainer$setTestData()}}
\item \href{#method-getNeuralnet}{\code{Trainer$getNeuralnet()}}
\item \href{#method-getOptimizer}{\code{Trainer$getOptimizer()}}
\item \href{#method-getTrainingData}{\code{Trainer$getTrainingData()}}
\item \href{#method-getTestData}{\code{Trainer$getTestData()}}
\item \href{#method-getBestNeuralnet}{\code{Trainer$getBestNeuralnet()}}
\item \href{#method-swapWithBestNeuralnet}{\code{Trainer$swapWithBestNeuralnet()}}
\item \href{#method-separateData}{\code{Trainer$separateData()}}
\item \href{#method-generateTrainingTest}{\code{Trainer$generateTrainingTest()}}
\item \href{#method-test}{\code{Trainer$test()}}
\item \href{#method-train}{\code{Trainer$train()}}
\item \href{#method-reset}{\code{Trainer$reset()}}
\item \href{#method-clone}{\code{Trainer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new Trainer. It resets the given
optimizer.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$new(
  neuralnet,
  optimizer,
  training_data = NULL,
  test_data = NULL,
  accuracy_tester = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{neuralnet}}{The neural network to be trained}

\item{\code{optimizer}}{The optimizer used for training the neural network}

\item{\code{training_data}}{The list of the training data}

\item{\code{test_data}}{The list of the test data}

\item{\code{accuracy_tester}}{A method that must compare
the output of the neural network for a given input
with the expected output.
If the output of the network is considered correct,
the method must returns true, otherwise false.
If \code{accuracy_tester} is \code{NULL}, and the
given neural network uses classification, the Trainer
generates the standard \code{accuracy_tester} method
for classification (recomended).
If the neural network uses regression, a custom
\code{accuracy_tester} method must be given}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{training_data <- list(
   list(input = 1:784, expectedOutput = 2),
   list(input = 784:1, expectedOutput = 10),
   ...
)
test_data <- list(
   list(input = 1:784 * 2, expectedOutput = 1),
   ...
)
trainer <- Trainer$new(nn_cls, optimizer,
                       training_data,
                       test_data))

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setNeuralnet"></a>}}
\if{latex}{\out{\hypertarget{method-setNeuralnet}{}}}
\subsection{Method \code{setNeuralnet()}}{
Changes the neural network to train.
After the change of the network, the method
resets the optimiser and forgets the last test score,
the best test score and the best neural network
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$setNeuralnet(neuralnet)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{neuralnet}}{The new neural network to be trained}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setOptimizer"></a>}}
\if{latex}{\out{\hypertarget{method-setOptimizer}{}}}
\subsection{Method \code{setOptimizer()}}{
Changes the optimizer used for training the neural network
The method also resets the new optimizer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$setOptimizer(optimizer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{optimizer}}{The optimizer used for training
the neural network}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setTrainingData"></a>}}
\if{latex}{\out{\hypertarget{method-setTrainingData}{}}}
\subsection{Method \code{setTrainingData()}}{
Sets the training data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$setTrainingData(training_data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{training_data}}{A list of lists that must each contain the
named components \code{input} and \code{expectedOutput};
The data to be separated into training data and test data}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{training_data <- list(
  list(input = c(0.5, 0.5),
       expectedOutput = 2),
  list(input = c(0.1, 0.8),
       expectedOutput = 1)
)
trainer$setTrainingData(training_data)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setTestData"></a>}}
\if{latex}{\out{\hypertarget{method-setTestData}{}}}
\subsection{Method \code{setTestData()}}{
Sets the test data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$setTestData(test_data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{test_data}}{A list of lists that must each contain the
named components \code{input} and \code{expectedOutput};
The data to be separated into training data and test data}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{test_data <- list(
  list(input = c(0.5, 0.5),
       expectedOutput = 2),
  list(input = c(0.1, 0.8),
       expectedOutput = 1)
)
trainer$setTestData(test_data)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getNeuralnet"></a>}}
\if{latex}{\out{\hypertarget{method-getNeuralnet}{}}}
\subsection{Method \code{getNeuralnet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$getNeuralnet()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The new neural network to be trained
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOptimizer"></a>}}
\if{latex}{\out{\hypertarget{method-getOptimizer}{}}}
\subsection{Method \code{getOptimizer()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$getOptimizer()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The optimizer used for training
the neural network
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTrainingData"></a>}}
\if{latex}{\out{\hypertarget{method-getTrainingData}{}}}
\subsection{Method \code{getTrainingData()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$getTrainingData()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The list of the training data
If the Trainer doesn't have training data, it
returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTestData"></a>}}
\if{latex}{\out{\hypertarget{method-getTestData}{}}}
\subsection{Method \code{getTestData()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$getTestData()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The list of the test data
If the Trainer doesn't have test data, it
returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getBestNeuralnet"></a>}}
\if{latex}{\out{\hypertarget{method-getBestNeuralnet}{}}}
\subsection{Method \code{getBestNeuralnet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$getBestNeuralnet()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A copy of the neural network, that scored the
best test result. If no test was performed with the
current neural network (since the last reset), the
method returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-swapWithBestNeuralnet"></a>}}
\if{latex}{\out{\hypertarget{method-swapWithBestNeuralnet}{}}}
\subsection{Method \code{swapWithBestNeuralnet()}}{
Swaps the currently used neural network with the
copy of the neural network, that scored the best
test result. If such a copy does not exists, the
method does nothing
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$swapWithBestNeuralnet()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-separateData"></a>}}
\if{latex}{\out{\hypertarget{method-separateData}{}}}
\subsection{Method \code{separateData()}}{
Separates the given data into training data and test data
The parameter \code{test_percentage} determines what portion
of the data will be used for testing and consequently
what portion will be used for training.
If the trainer already has training and / or test data,
the old data will be overwritten.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$separateData(data, test_percentage = 0.15)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A list of lists that must each contain the
named components \code{input} and \code{expectedOutput};
The data to be separated into training data and test data}

\item{\code{test_percentage}}{The portion
of the data that will be used for testing}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{data <- list(
  list(input = c(0.5, 0.5),
       expectedOutput = 2),
  list(input = c(0.1, 0.8),
       expectedOutput = 1)
)
trainer$separateData(data,
           test_percentage = 0.5)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generateTrainingTest"></a>}}
\if{latex}{\out{\hypertarget{method-generateTrainingTest}{}}}
\subsection{Method \code{generateTrainingTest()}}{
Creates training data list and test data list from the given
inputs and targets
The parameter \code{test_percentage} determines what portion
of the data will be used for testing and consequently
what portion will be used for training.
If the trainer already has training and / or test data,
the old data will be overwritten.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$generateTrainingTest(inputs, targets, test_percentage = 0.15)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{A list with the input data}

\item{\code{targets}}{A list with the target data}

\item{\code{test_percentage}}{The portion
of the data that will be used for testing}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{inputs <-
  list(c(0.5, 0.5), c(0.1, 0.8))
targets <-
  list(2, 1)
trainer$generateTrainingTest
  (inputs, targets,
   test_percentage = 0.5)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-test"></a>}}
\if{latex}{\out{\hypertarget{method-test}{}}}
\subsection{Method \code{test()}}{
Tests the neural network on the first \code{N} elements
of the test data list. It will do so by calculating the
output of the network for the first \code{N} inputs in the
test data list and comparing the network output with the
expected output using the \code{accuracy_tester} method.
The method will then calculate the proportion of correctly
calculated outputs and save the result. If the test result
is better than the previous best test result, the method
will store the new best test result and save the current
network as the best network.
If the trainer does not have a test data list,
the method throws an error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$test(N = Inf)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{N}}{Number of tests to perform. If N is bigger than
the length of the test data list, the method will replace
N with the length of the test data list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
proportion of correctly calculated outputs
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{test_result <- trainer$test(500)
test_result <- trainer$test()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-train"></a>}}
\if{latex}{\out{\hypertarget{method-train}{}}}
\subsection{Method \code{train()}}{
train trains the neural network of the trainer with the given optimizer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$train(
  epochs,
  training_per_epoch = Inf,
  use_early_stopping = F,
  es_test_frequency = 5000,
  es_test_size = 500,
  es_minimal_improvement = 0
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{epochs}}{integer; the number of epochs, the network will be trained}

\item{\code{training_per_epoch}}{integer; the amount of training data that will be used for an epoch
if nothing is specified, the method will use all training data available}

\item{\code{use_early_stopping}}{logical; if true, early stopping is enabled}

\item{\code{es_test_frequency}}{integer; if early stopping is enabled,
test the performance of the network every \code{es_test_frequency} training sessions}

\item{\code{es_test_size}}{integer; if early stopping is enabled and the performance of
the network is to be evaluated, test the network with \code{es_test_size} test objects}

\item{\code{es_minimal_improvement}}{double; if early stopping is enabled, stop the training,
if the measured success ratio of the network didn't improve by at least
\code{es_minimal_improvement} in comparison to the best measured success ratio
for this network. Negative values are allowed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
True if the training was completed, false otherwise
(early stopping)
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{trainer$train(epochs = 5)
trainer$train(epochs = 1,
     training_per_epoch = 1000)
trainer$train(epochs = 10,
     training_per_epoch = 1000)

trainer$train(
     epochs = 10,
     use_early_stopping = T,
     es_test_frequency = 1000,
     es_test_size = 100,
     es_minimal_improvement = -0.02)
finished <- trainer$train(
     epochs = 50,
     training_per_epoch = 10000
     use_early_stopping = T,
     es_test_frequency = 1000,
     es_test_size = 100,
     es_minimal_improvement = -0.02)

if (finished)
     print("training was completed")
else
     print("training was aborted by early stopping")

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
The trainer forgets the last test result, the best test
result and the best network. The optimizer gets reset-ted.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$reset()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Trainer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
