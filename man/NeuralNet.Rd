% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/neuralnet.R
\name{NeuralNet}
\alias{NeuralNet}
\title{R6 Class Representing a Neural Network}
\description{
R6 Class Representing a Neural Network

R6 Class Representing a Neural Network
}
\examples{

## ------------------------------------------------
## Method `NeuralNet$new`
## ------------------------------------------------

# will generate a Neural Network with two input nodes, two output nodes,
# and two hidden layers with four nodes each.
nn.1 <- NeuralNet$new(c(2,4,4,2))

# will generate a Neural Network using the predefined sigmoid function as
# activation function for all layers (including the outputlayer)
nn.2 <- NeuralNet$new(
  c(2,4,4,2),
  activationfct = "sigmoid",
  outputfct = "sigmoid")

## ------------------------------------------------
## Method `NeuralNet$plot`
## ------------------------------------------------

nn <- NeuralNet$new(c(2,4,4,2))

# will plot the Neural Network
nn$plot()

# will plot the Neural Network with normalized linewidth
nn$plot(standard.lwd = TRUE)

# will plot the Neural Network with only two colors,
# red for negative values, green for positive values
nn$plot(col.fct = function(x) {
  b <- (x < 0)
  v <- vector(length = length(b))
  v[b] <- "red"
  v[!b] <- "green"

  v
})

# saving a plot

# file will be saved as 'file.png'
nn$plot(image.save = TRUE,
  image.filename = "file",
  image.type = "png")

# here '.jpeg' is not a valid extension for type 'png', '.png' will
# be appendedto the filename, file will be saved as 'file.jpeg.png'
nn$plot(image.save = TRUE,
  image.filename = "file.jpeg",
  image.type = "png")

# file will be saved in directory 'test/', if 'test/' does not exist
# grDevices will return an error
nn$plot(image.save = TRUE,
  image.filename = "test/file.jpg",
  image.type = "jpg")

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{inputsize}}{size of the input for the Neural Network (first layer of nodes).}

\item{\code{weights}}{list of matrices representing the weights of the connections
between nodes.}

\item{\code{bias}}{list of vectors representing the biases for nodes.}

\item{\code{nrhiddenlayers}}{number of hidden layers of the Neural Network.}

\item{\code{actfct}}{function to be used as activation function.}

\item{\code{dActfct}}{function to be used as derivative of the activation function.}

\item{\code{outputfct}}{function to be used as activation function on the last layer.}

\item{\code{category}}{either classification or regression}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{NeuralNet$new()}}
\item \href{#method-calculate}{\code{NeuralNet$calculate()}}
\item \href{#method-plot}{\code{NeuralNet$plot()}}
\item \href{#method-clone}{\code{NeuralNet$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create a new R6 instance of a NeuralNetwork
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNet$new(
  layers,
  activationfct = "ReLU",
  dActivationfct = NULL,
  outputfct = NULL,
  category = "classification"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layers}}{numeric vector with nodes per layer}

\item{\code{activationfct}}{string matching predefined activation function or
other function, see \code{Activation Functions}.}

\item{\code{dActivationfct}}{NULL, when using predefined Activation functions, or
the derivative of a custom Activation function, it is not checked for
correcteness.}

\item{\code{outputfct}}{string matching predefined activation function or
other a function, see \code{Activation Functions}, used as activation
function for the last layer of nodes}

\item{\code{category}}{string matching valid category for Neural Network, either
classification or regression.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\subsection{Activation Functions}{

This Function is used on the Values of a Node after calculating Weights
and Biases. The values for \code{activationfct} and \code{outputfct}
can be either strings matching a predefined Function or a \code{function}.

The predefined Functions are currently:
\itemize{
\item ReLu
\item sigmoid
\item tanh
}

\code{outputfct} can alternatively be \code{NULL} if no activation
function shoud be applied to the last layer.

When using a custom function to be used, a derivative for this function must
be given to be used while training the Neural Network. This derivative is
not checked for correcteness.
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# will generate a Neural Network with two input nodes, two output nodes,
# and two hidden layers with four nodes each.
nn.1 <- NeuralNet$new(c(2,4,4,2))

# will generate a Neural Network using the predefined sigmoid function as
# activation function for all layers (including the outputlayer)
nn.2 <- NeuralNet$new(
  c(2,4,4,2),
  activationfct = "sigmoid",
  outputfct = "sigmoid")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-calculate"></a>}}
\if{latex}{\out{\hypertarget{method-calculate}{}}}
\subsection{Method \code{calculate()}}{
will calculate an \code{output} for a given \code{input} using the existing
weights and biases, as well as the existing activation and output functions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNet$calculate(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{numeric vector of values with length equal the number of nodes
in the input layer.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list with three numeric vectors, containing rawNodeValues,
nodeValues and output.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
plot an R6 NeuralNet using graphics and grDevices
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNet$plot(
  max.lwd = 5,
  standard.lwd = FALSE,
  col.fct = function(x) {     grDevices::hcl(x * 60 + 60) },
  image.save = FALSE,
  image.filename = NULL,
  image.type = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{max.lwd}}{numeric value representing the maximum linewidth, default is 5.}

\item{\code{standard.lwd}}{logical value, should all lines should be normalized.}

\item{\code{col.fct}}{a function determining the color for specific values.}

\item{\code{image.save}}{logical value, should the image be saved as file.}

\item{\code{image.filename}}{name of the outputfile, if \code{image.save = TRUE}
filepath and filename used to save the image.}

\item{\code{image.type}}{name of the filetype, if \code{image.save = TRUE} this
filetype will be used to save the image.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\subsection{Color Functions}{

\code{col.fct} will be given a vector with values between -1 and 1.
They must return a vector of colors usable by the graphics package
(see the \code{col} Argument of \code{?graphics::par}).

If the Color Function is \code{NULL} all colors will be black.
}

\subsection{Saving Images}{

When \code{image.save} is set to TRUE, \code{NeuralNet$plot} will attempt
to save the shown graphic as file.

The file will be saved using the \code{image.filename} Argument, this can
be a path to a file. If the path does not exist \code{grDevices::device()}
will give an error. If \code{image.filename} does not contain a valid file
extension to be used with the type specified in \code{image.type}, an
extension will be added.

Valid filetypes are:
\itemize{
\item \code{wmf} and \code{emf} using \code{grDevices::win.metafile}
\item \code{png} using \code{grDevices::png}
\item \code{jpg} and \code{jpeg} using \code{grDevices::jpeg}
\item \code{bmp} using \code{grDevices::bmp}
\item \code{tif} and \code{tiff} using \code{grDevices::tiff}
\item \code{ps} and \code{eps} using \code{grDevices::postscript}
\item \code{pdf} using \code{grDevices::pdf}
\item \code{svg} using \code{grDevices::svg}
}
}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{nn <- NeuralNet$new(c(2,4,4,2))

# will plot the Neural Network
nn$plot()

# will plot the Neural Network with normalized linewidth
nn$plot(standard.lwd = TRUE)

# will plot the Neural Network with only two colors,
# red for negative values, green for positive values
nn$plot(col.fct = function(x) {
  b <- (x < 0)
  v <- vector(length = length(b))
  v[b] <- "red"
  v[!b] <- "green"

  v
})

# saving a plot

# file will be saved as 'file.png'
nn$plot(image.save = TRUE,
  image.filename = "file",
  image.type = "png")

# here '.jpeg' is not a valid extension for type 'png', '.png' will
# be appendedto the filename, file will be saved as 'file.jpeg.png'
nn$plot(image.save = TRUE,
  image.filename = "file.jpeg",
  image.type = "png")

# file will be saved in directory 'test/', if 'test/' does not exist
# grDevices will return an error
nn$plot(image.save = TRUE,
  image.filename = "test/file.jpg",
  image.type = "jpg")

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NeuralNet$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
